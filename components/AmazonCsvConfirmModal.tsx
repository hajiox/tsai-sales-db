// /components/AmazonCsvConfirmModal.tsx ver.7 (ÈáçË§áËß£Ê∂àUI‰ªò„Åç)
"use client"

import React, { useState } from "react"
import { useRouter } from "next/navigation"
import ProductAddModal from "./ProductAddModal"

interface AmazonImportResult {
  productId: string
  productName: string
  amazonTitle: string
  quantity: number
  matched: boolean
  matchType?: 'exact' | 'learned' | 'high' | 'medium' | 'low'
}

interface AmazonCsvConfirmModalProps {
  isOpen: boolean
  results: AmazonImportResult[]
  unmatchedProducts: UnmatchedProduct[]
  csvSummary: any
  productMaster: { id: string; name: string }[]
  month: string
  isSubmitting: boolean
  onClose: () => void
  onConfirm: (updatedResults: AmazonImportResult[]) => void
}

interface UnmatchedProduct {
  amazonTitle: string
  quantity: number
  matched: false
}

interface NewProduct {
  amazonTitle: string
  productName: string
  price: number
  quantity: number
}

interface AllProductResult {
  productId: string
  productName: string
  amazonTitle: string
  quantity: number
  matched: boolean
  matchType?: 'exact' | 'learned' | 'high' | 'medium' | 'low' | 'none'
  hasData: boolean
  isDuplicate?: boolean
  duplicateInfo?: DuplicateInfo
}

interface DuplicateInfo {
  count: number
  amazonTitles: string[]
  totalQuantity: number
  originalQuantities: number[]
}

// üî• Êñ∞Ë¶è: ÈáçË§áËß£Ê∂àÁî®„ÅÆÂÄãÂà•CSVÂïÜÂìÅ
interface IndividualCsvProduct {
  id: string
  productId: string
  productName: string
  amazonTitle: string
  quantity: number
  matchType?: 'exact' | 'learned' | 'high' | 'medium' | 'low'
  isFromDuplicate: boolean
  originalDuplicateGroup?: string
}

export default function AmazonCsvConfirmModal({
  isOpen,
  results,
  unmatchedProducts = [],
  csvSummary = null,
  productMaster,
  month,
  isSubmitting,
  onClose,
  onConfirm,
}: AmazonCsvConfirmModalProps) {
  
  // üî• ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØÊ©üËÉΩ
  const detectDuplicates = (results: AmazonImportResult[]): { cleanResults: AllProductResult[], duplicates: AllProductResult[], individualProducts: IndividualCsvProduct[] } => {
    const productMap = new Map<string, AmazonImportResult[]>()
    
    // ÂïÜÂìÅIDÂà•„Å´„Ç∞„É´„Éº„ÉóÂåñ
    results.forEach(result => {
      if (!productMap.has(result.productId)) {
        productMap.set(result.productId, [])
      }
      productMap.get(result.productId)!.push(result)
    })
    
    const cleanResults: AllProductResult[] = []
    const duplicates: AllProductResult[] = []
    const individualProducts: IndividualCsvProduct[] = []
    
    // ÂÖ®ÂïÜÂìÅ„Éû„Çπ„Çø„Éº„Çí„Éô„Éº„Çπ„Å´Âá¶ÁêÜ
    productMaster.forEach(product => {
      const matchedResults = productMap.get(product.id) || []
      
      if (matchedResults.length === 0) {
        // „Éá„Éº„Çø„Å™„ÅóÂïÜÂìÅ
        cleanResults.push({
          productId: product.id,
          productName: product.name,
          amazonTitle: '',
          quantity: 0,
          matched: true,
          matchType: 'none',
          hasData: false,
          isDuplicate: false
        })
      } else if (matchedResults.length === 1) {
        // Ê≠£Â∏∏ÂïÜÂìÅÔºàÈáçË§á„Å™„ÅóÔºâ
        const result = matchedResults[0]
        cleanResults.push({
          ...result,
          hasData: true,
          isDuplicate: false
        })
        
        // ÂÄãÂà•ÂïÜÂìÅ„Å®„Åó„Å¶„ÇÇËøΩÂä†
        individualProducts.push({
          id: `single_${product.id}`,
          productId: result.productId,
          productName: result.productName,
          amazonTitle: result.amazonTitle,
          quantity: result.quantity,
          matchType: result.matchType,
          isFromDuplicate: false
        })
      } else {
        // üö® ÈáçË§áÂïÜÂìÅÊ§úÂá∫
        const totalQuantity = matchedResults.reduce((sum, r) => sum + r.quantity, 0)
        const amazonTitles = matchedResults.map(r => r.amazonTitle)
        const originalQuantities = matchedResults.map(r => r.quantity)
        
        const duplicateResult: AllProductResult = {
          productId: product.id,
          productName: product.name,
          amazonTitle: amazonTitles.join(' / '),
          quantity: totalQuantity,
          matched: true,
          matchType: matchedResults[0].matchType,
          hasData: true,
          isDuplicate: true,
          duplicateInfo: {
            count: matchedResults.length,
            amazonTitles,
            totalQuantity,
            originalQuantities
          }
        }
        
        duplicates.push(duplicateResult)
        cleanResults.push(duplicateResult)
        
        // üî• ÈáçË§áÂïÜÂìÅ„ÇíÂÄãÂà•„Å´ÂàÜÈõ¢„Åó„Å¶individualProducts„Å´ËøΩÂä†
        matchedResults.forEach((result, index) => {
          individualProducts.push({
            id: `duplicate_${product.id}_${index}`,
            productId: result.productId,
            productName: result.productName,
            amazonTitle: result.amazonTitle,
            quantity: result.quantity,
            matchType: result.matchType,
            isFromDuplicate: true,
            originalDuplicateGroup: product.id
          })
        })
      }
    })
    
    return { cleanResults, duplicates, individualProducts }
  }

  const { cleanResults, duplicates, individualProducts } = detectDuplicates(results)
  const [allProductsResults, setAllProductsResults] = useState<AllProductResult[]>(cleanResults)
  const [individualCsvProducts, setIndividualCsvProducts] = useState<IndividualCsvProduct[]>(individualProducts)
  const [originalResults, setOriginalResults] = useState<AmazonImportResult[]>(results)
  const [showUnmatched, setShowUnmatched] = useState(false)
  const [showZeroQuantity, setShowZeroQuantity] = useState(false)
  const [showDuplicatesOnly, setShowDuplicatesOnly] = useState(false)
  const [showDuplicateResolver, setShowDuplicateResolver] = useState(false) // üî• Êñ∞Ê©üËÉΩ
  const [isAddingProduct, setIsAddingProduct] = useState(false)
  const [selectedUnmatchedIndex, setSelectedUnmatchedIndex] = useState<number | null>(null)
  const [manualSelections, setManualSelections] = useState<{amazonTitle: string, productId: string}[]>([])
  const router = useRouter()

  // ÁµêÊûú„ÅåÊõ¥Êñ∞„Åï„Çå„Åü„ÇâÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ„ÇÇÊõ¥Êñ∞
  React.useEffect(() => {
    const { cleanResults, individualProducts } = detectDuplicates(results)
    setAllProductsResults(cleanResults)
    setIndividualCsvProducts(individualProducts)
    setOriginalResults(results)
  }, [results, productMaster])

  const handleProductChange = (index: number, newProductId: string) => {
    const selectedProduct = productMaster.find(p => p.id === newProductId)
    if (selectedProduct) {
      const updated = [...allProductsResults]
      updated[index] = {
        ...updated[index],
        productId: newProductId,
        productName: selectedProduct.name,
        matched: true
      }
      setAllProductsResults(updated)

      // Â≠¶Áøí„Éá„Éº„ÇøÂØæË±°„ÉÅ„Çß„ÉÉ„ÇØ
      if (updated[index].hasData) {
        setManualSelections(prev => [...prev, {
          amazonTitle: updated[index].amazonTitle,
          productId: newProductId
        }])
      }
    }
  }

  // üî• Êñ∞Ê©üËÉΩ: ÂÄãÂà•CSVÂïÜÂìÅ„ÅÆÂïÜÂìÅÂ§âÊõ¥
  const handleIndividualProductChange = (csvProductId: string, newProductId: string) => {
    const selectedProduct = productMaster.find(p => p.id === newProductId)
    if (selectedProduct) {
      const updated = [...individualCsvProducts]
      const targetIndex = updated.findIndex(p => p.id === csvProductId)
      if (targetIndex !== -1) {
        updated[targetIndex] = {
          ...updated[targetIndex],
          productId: newProductId,
          productName: selectedProduct.name
        }
        setIndividualCsvProducts(updated)

        // Â≠¶Áøí„Éá„Éº„ÇøËøΩÂä†
        setManualSelections(prev => [...prev, {
          amazonTitle: updated[targetIndex].amazonTitle,
          productId: newProductId
        }])
      }
    }
  }

  // üî• Êñ∞Ê©üËÉΩ: ÂÄãÂà•CSVÂïÜÂìÅ„ÅÆÊï∞ÈáèÂ§âÊõ¥
  const handleIndividualQuantityChange = (csvProductId: string, newQuantity: number) => {
    const updated = [...individualCsvProducts]
    const targetIndex = updated.findIndex(p => p.id === csvProductId)
    if (targetIndex !== -1) {
      updated[targetIndex] = {
        ...updated[targetIndex],
        quantity: newQuantity
      }
      setIndividualCsvProducts(updated)
    }
  }

  // üî• Êñ∞Ê©üËÉΩ: ÂÄãÂà•CSVÂïÜÂìÅ„ÅÆÂâäÈô§
  const removeIndividualProduct = (csvProductId: string) => {
    const updated = individualCsvProducts.filter(p => p.id !== csvProductId)
    setIndividualCsvProducts(updated)
  }

  const handleQuantityChange = (index: number, newQuantity: number) => {
    const updated = [...allProductsResults]
    updated[index] = { ...updated[index], quantity: newQuantity }
    setAllProductsResults(updated)
  }

  const removeResult = (index: number) => {
    const updated = [...allProductsResults]
    updated[index] = {
      ...updated[index],
      quantity: 0,
      amazonTitle: '',
      hasData: false,
      matchType: 'none',
      isDuplicate: false
    }
    setAllProductsResults(updated)
  }

  const openAddProductModal = (unmatchedIndex: number) => {
    setSelectedUnmatchedIndex(unmatchedIndex)
    setIsAddingProduct(true)
  }

  const handleAddProduct = async (productData: NewProduct) => {
    try {
      const response = await fetch('/api/products/add', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: productData.productName,
          price: productData.price,
          amazonTitle: productData.amazonTitle
        }),
      })

      if (!response.ok) throw new Error('ÂïÜÂìÅËøΩÂä†„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')

      const newProduct = await response.json()
      
      const newResult: AllProductResult = {
        productId: newProduct.product.id,
        productName: newProduct.product.name,
        amazonTitle: productData.amazonTitle,
        quantity: productData.quantity,
        matched: true,
        matchType: 'exact',
        hasData: true,
        isDuplicate: false
      }

      setAllProductsResults(prev => [...prev, newResult])
      setIsAddingProduct(false)
      setSelectedUnmatchedIndex(null)
      alert('ÂïÜÂìÅ„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü')
    } catch (error) {
      console.error('ÂïÜÂìÅËøΩÂä†„Ç®„É©„Éº:', error)
      alert('ÂïÜÂìÅËøΩÂä†„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
    }
  }

  const handleUnmatchedProductSelect = (unmatchedIndex: number, productId: string) => {
    if (!productId) return
    
    const selectedProduct = productMaster.find(p => p.id === productId)
    if (!selectedProduct) return

    const unmatchedProduct = unmatchedProducts[unmatchedIndex]
    
    const updated = [...allProductsResults]
    const existingIndex = updated.findIndex(p => p.productId === productId)
    
    if (existingIndex !== -1) {
      updated[existingIndex] = {
        ...updated[existingIndex],
        amazonTitle: unmatchedProduct.amazonTitle,
        quantity: unmatchedProduct.quantity,
        hasData: true,
        matchType: 'medium'
      }
      setAllProductsResults(updated)
    }

    setManualSelections(prev => [...prev, {
      amazonTitle: unmatchedProduct.amazonTitle,
      productId: selectedProduct.id
    }])
  }

  const getMatchingStats = () => {
    if (showDuplicateResolver) {
      // ÈáçË§áËß£Ê∂à„É¢„Éº„Éâ„Åß„ÅØÂÄãÂà•CSVÂïÜÂìÅ„Éô„Éº„Çπ„ÅßÈõÜË®à
      const withData = individualCsvProducts.filter(p => p.quantity > 0)
      return {
        total: individualCsvProducts.length,
        withData: withData.length,
        withoutData: individualCsvProducts.length - withData.length,
        duplicateCount: duplicates.length,
        totalQuantity: withData.reduce((sum, p) => sum + p.quantity, 0),
        csvOriginalCount: results.length
      }
    } else {
      // ÈÄöÂ∏∏„É¢„Éº„Éâ„Åß„ÅØÁµ±ÂêàÂæå„Éô„Éº„Çπ„ÅßÈõÜË®à
      const withData = allProductsResults.filter(r => r.hasData && r.quantity > 0)
      const withoutData = allProductsResults.filter(r => !r.hasData || r.quantity === 0)
      return {
        total: allProductsResults.length,
        withData: withData.length,
        withoutData: withoutData.length,
        duplicateCount: duplicates.length,
        totalQuantity: withData.reduce((sum, r) => sum + r.quantity, 0),
        csvOriginalCount: results.length
      }
    }
  }

  const stats = getMatchingStats()

  const handleConfirm = async () => {
    let resultsToConfirm: AmazonImportResult[] = []

    if (showDuplicateResolver) {
      // ÈáçË§áËß£Ê∂à„É¢„Éº„Éâ„Åß„ÅØÂÄãÂà•CSVÂïÜÂìÅ„Åã„ÇâÁ¢∫ÂÆö„Éá„Éº„Çø„Çí‰ΩúÊàê
      resultsToConfirm = individualCsvProducts
        .filter(p => p.quantity > 0)
        .map(p => ({
          productId: p.productId,
          productName: p.productName,
          amazonTitle: p.amazonTitle,
          quantity: p.quantity,
          matched: true,
          matchType: p.matchType as any
        }))
    } else {
      // ÈÄöÂ∏∏„É¢„Éº„Éâ„Åß„ÅØÁµ±ÂêàÂæå„Éá„Éº„Çø„Åã„ÇâÁ¢∫ÂÆö„Éá„Éº„Çø„Çí‰ΩúÊàê
      resultsToConfirm = allProductsResults
        .filter(r => r.hasData && r.quantity > 0)
        .map(r => ({
          productId: r.productId,
          productName: r.productName,
          amazonTitle: r.amazonTitle,
          quantity: r.quantity,
          matched: r.matched,
          matchType: r.matchType as any
        }))
    }

    // ÈáçË§á„Åå„ÅÇ„Çä„ÄÅËß£Ê∂à„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØË≠¶Âëä
    if (duplicates.length > 0 && !showDuplicateResolver) {
      const duplicateNames = duplicates.map(d => d.productName).join('\n')
      if (!confirm(`üö® ÈáçË§á„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„ÅüÔºÅ\n\nÈáçË§áÂïÜÂìÅ:\n${duplicateNames}\n\nÊï∞Èáè„ÅØËá™Âãï„ÅßÂêàË®à„Åï„Çå„Åæ„Åô„ÄÇÁ∂öË°å„Åó„Åæ„Åô„ÅãÔºü\n\n‚ÄªÈáçË§áËß£Ê∂àÁîªÈù¢„ÅßÂÄãÂà•„Å´‰øÆÊ≠£„Åô„Çã„Åì„Å®„ÇÇ„Åß„Åç„Åæ„Åô„ÄÇ`)) {
        return
      }
    }

    // Â≠¶Áøí„Éá„Éº„Çø‰∏ÄÊã¨ÁôªÈå≤
    for (const selection of manualSelections) {
      try {
        await fetch('/api/products/add-learning', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            amazonTitle: selection.amazonTitle,
            productId: selection.productId
          }),
        })
      } catch (error) {
        console.error('Â≠¶Áøí„Éá„Éº„ÇøËøΩÂä†„Ç®„É©„Éº:', error)
      }
    }
    
    onConfirm(resultsToConfirm)
  }

  if (!isOpen) return null

  // Ë°®Á§∫Áî®„Éá„Éº„Çø„ÅÆ„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
  let displayResults = allProductsResults
  if (showDuplicatesOnly) {
    displayResults = allProductsResults.filter(r => r.isDuplicate)
  } else if (!showZeroQuantity) {
    displayResults = allProductsResults.filter(r => r.hasData && r.quantity > 0)
  }

  // üî• ÈáçË§áËß£Ê∂à„É¢„Éº„ÉâÁî®„ÅÆË°®Á§∫„Éá„Éº„Çø
  let displayIndividualProducts = individualCsvProducts
  if (showDuplicateResolver) {
    displayIndividualProducts = individualCsvProducts.filter(p => p.isFromDuplicate)
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[9999] p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-7xl w-full max-h-[95vh] overflow-hidden flex flex-col">
        <div className="p-6 border-b bg-gray-50 flex-shrink-0">
          <h3 className="text-lg font-semibold">Amazon CSV„Ç§„É≥„Éù„Éº„ÉàÁ¢∫Ë™ç</h3>
          <p className="text-sm text-gray-600 mt-1">
            {month}Êúà„ÅÆAmazon„Éá„Éº„Çø„ÇíÁ¢∫Ë™ç„Åó„ÄÅÂøÖË¶Å„Å´Âøú„Åò„Å¶‰øÆÊ≠£„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
          </p>
          
          {/* üö® ÈáçË§áË≠¶Âëä */}
          {duplicates.length > 0 && !showDuplicateResolver && (
            <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-lg">
              <h4 className="text-red-800 font-semibold mb-2">‚ö†Ô∏è ÈáçË§áÊ§úÂá∫ÔºÅ</h4>
              <p className="text-sm text-red-700 mb-2">
                <strong>{duplicates.length}ÂïÜÂìÅ</strong>„ÅßÈáçË§á„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü„ÄÇÂêå„ÅòÂïÜÂìÅ„Éû„Çπ„Çø„Éº„Å´Ë§áÊï∞„ÅÆCSVÂïÜÂìÅ„ÅåÁ¥ê‰ªò„ÅÑ„Å¶„ÅÑ„Åæ„Åô„ÄÇ
              </p>
              <div className="text-xs text-red-600 mb-2">
                Êï∞Èáè„ÅØËá™Âãï„ÅßÂêàË®à„Åï„Çå„Åæ„Åô„Åå„ÄÅÂÄãÂà•„Å´‰øÆÊ≠£„Åô„Çã„Åì„Å®„ÇíÊé®Â•®„Åó„Åæ„Åô„ÄÇ
              </div>
              <button
                onClick={() => setShowDuplicateResolver(true)}
                className="px-4 py-2 bg-red-600 text-white rounded text-sm hover:bg-red-700"
              >
                üîß ÈáçË§á„ÇíÂÄãÂà•„Å´‰øÆÊ≠£„Åô„Çã
              </button>
            </div>
          )}

          {/* üî• ÈáçË§áËß£Ê∂à„É¢„Éº„ÉâË°®Á§∫ */}
          {showDuplicateResolver && (
            <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <h4 className="text-blue-800 font-semibold mb-2">üîß ÈáçË§áËß£Ê∂à„É¢„Éº„Éâ</h4>
              <p className="text-sm text-blue-700 mb-2">
                ÈáçË§á„Åó„Å¶„ÅÑ„ÅüCSVÂïÜÂìÅ„ÇíÂÄãÂà•„Å´Ë°®Á§∫„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Åù„Çå„Åû„Çå„ÇíÈÅ©Âàá„Å™ÂïÜÂìÅ„Éû„Çπ„Çø„Éº„Å´Á¥ê‰ªò„ÅëÁõ¥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
              </p>
              <button
                onClick={() => setShowDuplicateResolver(false)}
                className="px-4 py-2 bg-blue-600 text-white rounded text-sm hover:bg-blue-700"
              >
                ‚Üê ÈÄöÂ∏∏Ë°®Á§∫„Å´Êàª„Çã
              </button>
            </div>
          )}
          
          {/* Áµ±Ë®àÊÉÖÂ†± */}
          <div className="mt-4 grid grid-cols-2 md:grid-cols-5 gap-3">
            <div className="bg-white rounded-lg p-3 border">
              <div className="text-xs text-gray-500">ÂÖ®ÂïÜÂìÅÊï∞</div>
              <div className="text-lg font-bold text-blue-600">{stats.total}ÂìÅÁ®Æ</div>
            </div>
            <div className="bg-white rounded-lg p-3 border">
              <div className="text-xs text-gray-500">„Éá„Éº„Çø„ÅÇ„ÇäÂïÜÂìÅ</div>
              <div className="text-lg font-bold text-green-600">{stats.withData}ÂìÅÁ®Æ</div>
            </div>
            <div className="bg-white rounded-lg p-3 border">
              <div className="text-xs text-gray-500">ÂêàË®àË≤©Â£≤Êï∞Èáè</div>
              <div className="text-lg font-bold text-green-600">{stats.totalQuantity.toLocaleString()}ÂÄã</div>
            </div>
            <div className={`bg-white rounded-lg p-3 border ${stats.duplicateCount > 0 ? 'border-red-300 bg-red-50' : ''}`}>
              <div className="text-xs text-gray-500">ÈáçË§áÂïÜÂìÅ</div>
              <div className={`text-lg font-bold ${stats.duplicateCount > 0 ? 'text-red-600' : 'text-gray-400'}`}>
                {stats.duplicateCount}ÂìÅÁ®Æ
              </div>
            </div>
            <div className="bg-white rounded-lg p-3 border">
              <div className="text-xs text-gray-500">CSVÂÖÉË°åÊï∞</div>
              <div className="text-lg font-bold text-gray-600">{stats.csvOriginalCount}Ë°å</div>
            </div>
          </div>

          {/* Ë°®Á§∫Âàá„ÇäÊõø„Åà„Éú„Çø„É≥ */}
          {!showDuplicateResolver && (
            <div className="mt-4 flex gap-2 flex-wrap">
              <button
                onClick={() => setShowZeroQuantity(!showZeroQuantity)}
                className={`px-4 py-2 rounded-lg text-sm ${
                  showZeroQuantity 
                    ? 'bg-blue-600 text-white' 
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
              >
                {showZeroQuantity ? `„Éá„Éº„Çø„Å™„ÅóÂïÜÂìÅ„ÇíÈùûË°®Á§∫` : `„Åô„Åπ„Å¶Ë°®Á§∫ (${stats.total}ÂìÅÁ®Æ)`}
              </button>
              
              {stats.duplicateCount > 0 && (
                <button
                  onClick={() => setShowDuplicatesOnly(!showDuplicatesOnly)}
                  className={`px-4 py-2 rounded-lg text-sm ${
                    showDuplicatesOnly 
                      ? 'bg-red-600 text-white' 
                      : 'bg-red-100 text-red-800 hover:bg-red-200'
                  }`}
                >
                  {showDuplicatesOnly ? 'ÂÖ®ÂïÜÂìÅË°®Á§∫' : `ÈáçË§áÂïÜÂìÅ„ÅÆ„ÅøË°®Á§∫ (${stats.duplicateCount}ÂìÅÁ®Æ)`}
                </button>
              )}
            </div>
          )}
        </div>

        <div className="flex-1 p-4 overflow-y-auto">
          {/* üî• ÈáçË§áËß£Ê∂à„É¢„Éº„Éâ */}
          {showDuplicateResolver ? (
            <>
              <h4 className="text-lg font-semibold mb-4 text-blue-600">
                ÈáçË§áCSVÂïÜÂìÅ‰∏ÄË¶ß ({displayIndividualProducts.length}ÂïÜÂìÅ)
              </h4>
              <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded">
                <p className="text-sm text-blue-700">
                  <strong>üí° ÈáçË§áËß£Ê∂à:</strong> 
                  Âêå„ÅòÂïÜÂìÅ„Éû„Çπ„Çø„Éº„Å´Á¥ê‰ªò„ÅÑ„Å¶„ÅÑ„Åü{duplicates.length}ÂïÜÂìÅ„ÅÆÂÄãÂà•CSVÂïÜÂìÅ„ÇíË°®Á§∫„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ
                  „Åù„Çå„Åû„Çå„ÇíÈÅ©Âàá„Å™ÂïÜÂìÅ„Éû„Çπ„Çø„Éº„Å´Á¥ê‰ªò„ÅëÁõ¥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
                </p>
              </div>
              
              <div className="grid grid-cols-1 xl:grid-cols-2 gap-4">
                {displayIndividualProducts.map((csvProduct) => (
                  <div key={csvProduct.id} className="border-2 border-red-200 rounded-lg p-4 bg-red-50">
                    {/* ÈáçË§áÂÖÉÊÉÖÂ†± */}
                    <div className="mb-4 p-2 bg-red-100 border border-red-200 rounded">
                      <div className="text-xs text-red-700 font-semibold">üö® ÈáçË§áÂÖÉÂïÜÂìÅ</div>
                      <div className="text-xs text-red-600 mt-1">
                        ÂÖÉ„ÄÖÁ¥ê‰ªò„ÅçÂÖà: {csvProduct.productName}
                      </div>
                    </div>

                    {/* CSVÂïÜÂìÅÊÉÖÂ†± */}
                    <div className="mb-4">
                      <label className="text-xs text-gray-500 font-medium">CSVÂïÜÂìÅÂêç</label>
                      <p className="text-sm font-bold text-gray-800">{csvProduct.amazonTitle}</p>
                    </div>

                    {/* ÂïÜÂìÅÈÅ∏ÊäûÔºà‰øÆÊ≠£Ôºâ */}
                    <div className="mb-4">
                      <label className="text-xs text-gray-500 font-medium block mb-1">
                        Ê≠£„Åó„ÅÑÂïÜÂìÅ„Éû„Çπ„Çø„Éº„ÇíÈÅ∏Êäû
                        <span className="ml-2 text-xs text-red-600">‚Äª‰øÆÊ≠£ÂøÖÈ†à</span>
                      </label>
                      <select
                        value={csvProduct.productId}
                        onChange={(e) => handleIndividualProductChange(csvProduct.id, e.target.value)}
                        className="w-full text-sm border-2 border-red-300 rounded px-3 py-2 bg-white"
                      >
                        <option value="">ÂïÜÂìÅ„ÇíÈÅ∏Êäû...</option>
                        {productMaster.map((product) => (
                          <option key={product.id} value={product.id}>{product.name}</option>
                        ))}
                      </select>
                    </div>

                    {/* Êï∞Èáè„ÉªÂâäÈô§ */}
                    <div className="flex items-center gap-4 mb-4">
                      <div className="flex-1">
                        <label className="text-xs text-gray-500 font-medium block mb-1">Ë≤©Â£≤Êï∞</label>
                        <input
                          type="number"
                          value={csvProduct.quantity}
                          onChange={(e) => handleIndividualQuantityChange(csvProduct.id, parseInt(e.target.value) || 0)}
                          className="w-full text-sm border rounded px-3 py-2"
                          min="0"
                        />
                      </div>
                      <div className="pt-6">
                        <button
                          onClick={() => removeIndividualProduct(csvProduct.id)}
                          className="text-red-500 hover:text-red-700 text-sm px-3 py-2 border border-red-200 rounded"
                        >
                          ÂâäÈô§
                        </button>
                      </div>
                    </div>

                    {/* „Éû„ÉÉ„ÉÅ„Çø„Ç§„Éó */}
                    <div>
                      <div className="text-xs px-3 py-1 rounded inline-block bg-red-100 text-red-800">
                        ÈáçË§áËß£Ê∂à‰∏≠ - ‰øÆÊ≠£„ÅåÂøÖË¶Å
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </>
          ) : (
            /* ÈÄöÂ∏∏„É¢„Éº„Éâ */
            <>
              <h4 className="text-lg font-semibold mb-4 text-blue-600">
                {showDuplicatesOnly ? `ÈáçË§áÂïÜÂìÅ‰∏ÄË¶ß (${displayResults.length}ÂìÅÁ®Æ)` : `ÂÖ®ÂïÜÂìÅ‰∏ÄË¶ß (${displayResults.length}ÂìÅÁ®ÆË°®Á§∫‰∏≠)`}
              </h4>
              <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded">
                <p className="text-sm text-blue-700">
                  <strong>üí° Êï∞Â≠ó„ÅÆÊµÅ„Çå:</strong> 
                  CSVÂÖÉ„Éá„Éº„Çø{stats.csvOriginalCount}Ë°å ‚Üí Áµ±ÂêàÂæå{stats.withData}ÂìÅÁ®ÆÔºàÈáçË§á{stats.duplicateCount}‰ª∂Áµ±ÂêàÊ∏à„ÅøÔºâ
                  = Êï∞Èáè{stats.totalQuantity.toLocaleString()}ÂÄã
                </p>
              </div>
              
              <div className="grid grid-cols-1 xl:grid-cols-2 gap-4">
                {displayResults.map((result, index) => (
                  <div key={`${result.productId}-${index}`} className={`border rounded-lg p-4 ${
                    result.isDuplicate ? 'bg-red-50 border-red-300' :
                    !result.hasData ? 'bg-gray-50 border-gray-200' :
                    result.matchType === 'exact' || result.matchType === 'learned' ? 'bg-green-50 border-green-200' :
                    result.matchType === 'high' ? 'bg-blue-50 border-blue-200' :
                    result.matchType === 'medium' ? 'bg-yellow-50 border-yellow-200' :
                    'bg-orange-50 border-orange-200'
                  }`}>
                    
                    {/* ÈáçË§áË≠¶Âëä */}
                    {result.isDuplicate && result.duplicateInfo && (
                      <div className="mb-4 p-2 bg-red-100 border border-red-200 rounded">
                        <div className="text-xs text-red-700 font-semibold">üö® ÈáçË§áÊ§úÂá∫</div>
                        <div className="text-xs text-red-600 mt-1">
                          {result.duplicateInfo.count}‰ª∂„ÅÆCSVÂïÜÂìÅ„ÅåÂêå„Åò„Éû„Çπ„Çø„Éº„Å´Á¥ê‰ªò„Åç:
                        </div>
                        <div className="text-xs text-red-600 mt-1">
                          Êï∞Èáè: {result.duplicateInfo.originalQuantities.join(' + ')} = {result.duplicateInfo.totalQuantity}ÂÄã
                        </div>
                        <button
                          onClick={() => setShowDuplicateResolver(true)}
                          className="mt-2 text-xs px-2 py-1 bg-red-600 text-white rounded hover:bg-red-700"
                        >
                          ÂÄãÂà•‰øÆÊ≠£
                        </button>
                      </div>
                    )}

                    {/* ÂïÜÂìÅÂêç */}
                    <div className="mb-4">
                      <label className="text-xs text-gray-500 font-medium">ÂïÜÂìÅÂêç</label>
                      <p className="text-sm font-bold text-gray-800">{result.productName}</p>
                    </div>

                    {/* AmazonÂïÜÂìÅÂêç */}
                    {result.hasData && (
                      <div className="mb-4">
                        <label className="text-xs text-gray-500 font-medium">AmazonÂïÜÂìÅÂêç</label>
                        <p className="text-sm font-medium text-gray-700">{result.amazonTitle}</p>
                      </div>
                    )}

                    {/* ÂïÜÂìÅÈÅ∏Êäû */}
                    <div className="mb-4">
                      <label className="text-xs text-gray-500 font-medium block mb-1">
                        ÂïÜÂìÅÈÅ∏ÊäûÔºà‰øÆÊ≠£ÂèØËÉΩÔºâ
                        {result.hasData && <span className="ml-2 text-xs text-blue-600">‚ÄªË¶ÅÁ¢∫Ë™ç</span>}
                      </label>
                      <select
                        value={result.productId}
                        onChange={(e) => handleProductChange(index, e.target.value)}
                        className="w-full text-sm border rounded px-3 py-2"
                        disabled={!result.hasData}
                      >
                        <option value="">ÂïÜÂìÅ„ÇíÈÅ∏Êäû...</option>
                        {productMaster.map((product) => (
                          <option key={product.id} value={product.id}>{product.name}</option>
                        ))}
                      </select>
                    </div>

                    {/* Ë≤©Â£≤Êï∞„ÉªÂâäÈô§„Éú„Çø„É≥ */}
                    <div className="flex items-center gap-4 mb-4">
                      <div className="flex-1">
                        <label className="text-xs text-gray-500 font-medium block mb-1">
                          Ë≤©Â£≤Êï∞{result.isDuplicate ? 'ÔºàÁµ±ÂêàÊ∏à„ÅøÔºâ' : ''}
                        </label>
                        <input
                          type="number"
                          value={result.quantity}
                          onChange={(e) => handleQuantityChange(index, parseInt(e.target.value) || 0)}
                          className="w-full text-sm border rounded px-3 py-2"
                          min="0"
                          disabled={!result.hasData}
                        />
                      </div>
                      {result.hasData && (
                        <div className="pt-6">
                          <button
                            onClick={() => removeResult(index)}
                            className="text-red-500 hover:text-red-700 text-sm px-3 py-2 border border-red-200 rounded"
                          >
                            ÂâäÈô§
                          </button>
                        </div>
                      )}
                    </div>

                    {/* „Éû„ÉÉ„ÉÅ„Çø„Ç§„Éó„É©„Éô„É´ */}
                    <div>
                      <div className={`text-xs px-3 py-1 rounded inline-block ${
                        result.isDuplicate ? 'bg-red-100 text-red-800' :
                        !result.hasData ? 'bg-gray-100 text-gray-600' :
                        result.matchType === 'exact' || result.matchType === 'learned' ? 'bg-green-100 text-green-800' :
                        result.matchType === 'high' ? 'bg-blue-100 text-blue-800' :
                        result.matchType === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                        'bg-orange-100 text-orange-800'
                      }`}>
                        {result.isDuplicate ? `ÈáçË§áÁµ±Âêà (${result.duplicateInfo?.count}‰ª∂)` :
                         !result.hasData ? '„Éá„Éº„Çø„Å™„Åó' :
                         result.matchType === 'exact' ? 'ÂÆåÂÖ®‰∏ÄËá¥ÔºàË¶ÅÁ¢∫Ë™çÔºâ' :
                         result.matchType === 'learned' ? 'Â≠¶ÁøíÊ∏à„ÅøÔºàË¶ÅÁ¢∫Ë™çÔºâ' :
                         result.matchType === 'high' ? 'È´òÁ≤æÂ∫¶ÔºàË¶ÅÁ¢∫Ë™çÔºâ' :
                         result.matchType === 'medium' ? '‰∏≠Á≤æÂ∫¶ÔºàË¶ÅÁ¢∫Ë™çÔºâ' :
                         '‰ΩéÁ≤æÂ∫¶ÔºàË¶ÅÁ¢∫Ë™çÔºâ'}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </>
          )}
        </div>

        <div className="border-t bg-gray-50 p-6 flex-shrink-0">
          <div className="flex justify-between items-center">
            <div className="text-sm text-gray-600">
              <div>AmazonÂàó„ÅÆ„Åø„ÇíÊõ¥Êñ∞„Åó„Åæ„ÅôÔºà‰ªñ„ÅÆEC„Çµ„Ç§„Éà„Éá„Éº„Çø„ÅØ‰øùÊåÅÔºâ</div>
              <div className="text-xs text-blue-600 mt-1">
                {showDuplicateResolver ? (
                  <>‚úÖ ÈáçË§áËß£Ê∂à„É¢„Éº„Éâ: {stats.withData}‰ª∂„ÅÆCSVÂïÜÂìÅ„ÇíDB„Å´‰øùÂ≠ò</>
                ) : (
                  <>‚úÖ „Éá„Éº„Çø„ÅÇ„Çä{stats.withData}ÂìÅÁ®Æ„Éª{stats.totalQuantity.toLocaleString()}ÂÄã„ÇíDB„Å´‰øùÂ≠ò
                  {stats.duplicateCount > 0 && (
                    <span className="text-red-600 ml-2">üö® ÈáçË§á{stats.duplicateCount}‰ª∂Áµ±ÂêàÊ∏à„Åø</span>
                  )}</>
                )}
              </div>
            </div>
            <div className="flex gap-3">
              <button
                onClick={onClose}
                disabled={isSubmitting}
                className="px-6 py-2 text-sm border border-gray-300 rounded hover:bg-gray-50 disabled:opacity-50"
              >
                „Ç≠„É£„É≥„Çª„É´
              </button>
              <button
                onClick={handleConfirm}
                disabled={isSubmitting || stats.withData === 0}
                className={`px-6 py-2 text-sm text-white rounded disabled:opacity-50 ${
                  showDuplicateResolver ? 'bg-blue-600 hover:bg-blue-700' :
                  stats.duplicateCount > 0 ? 'bg-red-600 hover:bg-red-700' :
                  isSubmitting ? 'bg-blue-400' : 'bg-blue-600 hover:bg-blue-700'
                }`}
              >
                {isSubmitting ? 'Âá¶ÁêÜ‰∏≠...' : 
                 showDuplicateResolver ? `ÈáçË§áËß£Ê∂àÂÆå‰∫ÜÔºö${stats.withData}‰ª∂„ÇíDB„Å´ÂèçÊò†` :
                 stats.duplicateCount > 0 ? `ÈáçË§áÁµ±Âêà„Åó„Å¶${stats.withData}ÂìÅÁ®Æ„ÇíDB„Å´ÂèçÊò†` :
                 `${stats.withData}ÂìÅÁ®Æ„ÇíDB„Å´ÂèçÊò†`}
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* ÂïÜÂìÅËøΩÂä†„É¢„Éº„ÉÄ„É´ */}
      {isAddingProduct && selectedUnmatchedIndex !== null && (
        <ProductAddModal
          isOpen={isAddingProduct}
          unmatchedProduct={unmatchedProducts[selectedUnmatchedIndex]}
          onClose={() => {
            setIsAddingProduct(false)
            setSelectedUnmatchedIndex(null)
          }}
          onAdd={handleAddProduct}
        />
      )}
    </div>
  )
}
