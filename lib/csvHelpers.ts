// /lib/csvHelpers.ts  ver.8
// ------------------------------------------------------------
// ÂÖ±ÈÄö„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£„Å®Á∞°Êòì„Éû„ÉÉ„ÉÅ„É≥„Ç∞„Éò„É´„Éë„ÉºÔºàBASEÂØæÂøúËøΩÂä†Ôºâ
// ------------------------------------------------------------
import iconv from 'iconv-lite';

/* ------------------------------------------------------------------ */
/* 1. „Éê„Ç§„Éä„É™ ‚Üí UTF-8 Ëá™ÂãïÂà§ÂÆö„Éá„Ç≥„Éº„Éâ                               */
/* ------------------------------------------------------------------ */
export function detectAndDecode(buf: Buffer): string {
  const utf8 = buf.toString('utf8');
  const bad  = (utf8.match(/\uFFFD/g) || []).length;
  if (bad / utf8.length > 0.03) {
    return iconv.decode(buf, 'shift_jis');
  }
  return utf8;
}

/* ------------------------------------------------------------------ */
/* 2. ÂïÜÂìÅ„Éá„Éº„ÇøÂûãÔºàBASEÂØæÂøúËøΩÂä†Ôºâ                                     */
/* ------------------------------------------------------------------ */
export interface Product {
  id: string;
  name: string;
  series?: string;
  amazon_title?: string;
  rakuten_title?: string;
  yahoo_title?: string;
  mercari_title?: string;
  base_title?: string;        // üè™ BASEÂØæÂøúËøΩÂä†
}

interface LearningMap {
  amazon_title?: string;
  rakuten_title?: string;
  yahoo_title?: string;
  mercari_title?: string;
  base_title?: string;        // üè™ BASEÂØæÂøúËøΩÂä†
  product_id: string;
}

/* ------------------------------------------------------------------ */
/* 3. „Çø„Ç§„Éà„É´„Åã„ÇâÈáçË¶Å„Ç≠„Éº„ÉØ„Éº„ÉâÊäΩÂá∫ÔºàBASEÂïÜÂìÅÁâπÊúâ„Ç≠„Éº„ÉØ„Éº„ÉâËøΩÂä†Ôºâ      */
/* ------------------------------------------------------------------ */
export function extractImportantKeywords(title: string): string[] {
  const brands = [
    'ÊøÄËæõ', '„ÉÅ„É£„Éº„Ç∑„É•„Éº', 'Ë®≥„ÅÇ„Çä', '„É¨„Éà„É´„Éà', 'Ê•µÂéö', '„Ç´„ÉÉ„Éà', '650g',
    'ÂÄãÂåÖË£Ö', 'ÂÜ∑ÂáçÁô∫ÈÄÅ', 'ÁÑºË±ö', '„É©„Éº„É°„É≥', 'ÁÇíÈ£Ø', '„Éà„ÉÉ„Éî„É≥„Ç∞', 'ÈÄÅÊñôÁÑ°Êñô',
    '‰ºöÊ¥•„Éñ„É©„É≥„ÉâÈ§®', '„Éó„É≠‰ªïÊßò', '‰∫åÈÉé„Ç§„É≥„Çπ„Éë„Ç§„Ç¢Á≥ª',
    // üè™ BASEÁâπÊúâ„Ç≠„Éº„ÉØ„Éº„ÉâËøΩÂä†
    '„Å§„ÅëÈ∫∫', '„Éë„Éº„Éï„Çß„ÇØ„Éà„É©„Éº„É°„É≥', 'Ê•µ„Å´„Åº„Åó', 'È≠ö‰ªãË±öÈ™®', '„Ç™„Éº„Ç∑„Éß„É≥',
    'Ê•µÂ§™È∫∫', '‰ªò„ÅëÈ∫∫', '„Å©„Çç„Çπ„Éº„Éó', 'È≠öÁ≤â', 'ÂñúÂ§öÊñπ', 'Â±±Â°©', 'BUTA', 'IE-K'
  ];
  return Array.from(
    new Set(
      title
        .replace(/[„Äå„Äç„Äê„ÄëÔºªÔºΩ\[\]\(\)„ÄÅ„ÄÇ,.]/g, ' ')
        .split(/\s+/)
        .filter(Boolean)
        .concat(brands.filter((b) => title.includes(b)))
    )
  );
}

/* ------------------------------------------------------------------ */
/* 4. „Ç∑„É≥„Éó„É´È°û‰ººÂ∫¶„Éû„ÉÉ„ÉÅ„É≥„Ç∞ÔºàBASEÂØæÂøúËøΩÂä†Ôºâ                        */
/* ------------------------------------------------------------------ */
export function findBestMatchSimplified(
  title: string,
  products: Product[],
  learning: LearningMap[]
): Product | null {
  // 4-1. Â≠¶Áøí„Éá„Éº„ÇøÂÆåÂÖ®‰∏ÄËá¥ÔºàBASEÂØæÂøúËøΩÂä†Ôºâ
  const learned = learning.find((m) =>
    [m.amazon_title, m.rakuten_title, m.yahoo_title, m.mercari_title, m.base_title].includes(title)
  );
  if (learned) {
    return products.find((p) => p.id === learned.product_id) || null;
  }

  // 4-2. ÂïÜÂìÅÂêç„ÅÆÂÆåÂÖ®‰∏ÄËá¥ÔºàBASEÂØæÂøúËøΩÂä†Ôºâ
  const direct = products.find((p) =>
    [p.amazon_title, p.rakuten_title, p.yahoo_title, p.mercari_title, p.base_title, p.name].includes(title)
  );
  if (direct) return direct;

  // 4-3. „Ç≠„Éº„ÉØ„Éº„Éâ„Çπ„Ç≥„Ç¢„É™„É≥„Ç∞ÔºàBASEÂØæÂøúËøΩÂä†Ôºâ
  const keywords = extractImportantKeywords(title);
  let best: Product | null = null;
  let maxScore = 0;
  for (const p of products) {
    const target = [p.amazon_title, p.rakuten_title, p.yahoo_title, p.mercari_title, p.base_title, p.name]
      .filter(Boolean)
      .join(' ');
    const score = keywords.filter((k) => target.includes(k)).length;
    if (score > maxScore) {
      best = p;
      maxScore = score;
    }
  }
  return best;
}

/* ------------------------------------------------------------------ */
/* 5. „ÉÅ„É£„Éç„É´Âà•„Ç∑„É≥„Éó„É´„Éû„ÉÉ„ÉÅ„É≥„Ç∞Ôºà„É°„É´„Ç´„É™„ÉªBASEÁî®Ôºâ                 */
/* ------------------------------------------------------------------ */
export function findBestMatchByChannel(
  title: string,
  products: Product[],
  channel: string
): { product: Product; confidence: number } | null {
  // 4-1. ÂïÜÂìÅÂêç„ÅÆÂÆåÂÖ®‰∏ÄËá¥
  const channelKey = `${channel}_title` as keyof Product;
  const direct = products.find((p) =>
    [p[channelKey], p.name].includes(title)
  );
  if (direct) return { product: direct, confidence: 100 };

  // 4-2. „Ç≠„Éº„ÉØ„Éº„Éâ„Çπ„Ç≥„Ç¢„É™„É≥„Ç∞
  const keywords = extractImportantKeywords(title);
  let best: Product | null = null;
  let maxScore = 0;
  
  for (const p of products) {
    const target = [p[channelKey], p.name]
      .filter(Boolean)
      .join(' ');
    const score = keywords.filter((k) => target.includes(k)).length;
    if (score > maxScore && score >= 2) { // ÊúÄ‰Ωé2„Ç≠„Éº„ÉØ„Éº„Éâ‰∏ÄËá¥
      best = p;
      maxScore = score;
    }
  }
  
  if (best && maxScore >= 2) {
    const confidence = Math.min(95, maxScore * 15 + 50); // „Çπ„Ç≥„Ç¢„Éô„Éº„Çπ„ÅÆ‰ø°È†ºÂ∫¶
    return { product: best, confidence };
  }
  
  return null;
}
